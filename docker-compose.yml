# Docker Compose file for Observium - Portainer-ready
# Maintained by somsakc@hotmail.com
# Modified for Portainer deployment on Docker Swarm with persistent volumes

version: '3.8'

services:
  db:
    image: mariadb:11.6
    command: >
      --max_allowed_packet=64M 
      --skip-name-resolve 
      --transaction-isolation=READ-COMMITTED 
      --binlog-format=ROW 
      --innodb-file-per-table=1 
      --default-storage-engine=InnoDB
      --innodb-buffer-pool-size=128M 
      --innodb-log-file-size=32M 
      --innodb-flush-log-at-trx-commit=2
      --interactive-timeout=600 
      --wait-timeout=600
      --max-connections=100
      --query-cache-type=0
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    init: true
    tty: true
    stop_grace_period: 1m
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-passw0rd}
      MYSQL_USER: ${MYSQL_USER:-observium}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-passw0rd}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-observium}
      TZ: ${TZ:-America/Chicago}
      # Stability configuration
      MYSQL_INITDB_SKIP_TZINFO: 1
    volumes:
      - observium_mysql_data:/var/lib/mysql
      - observium_mysql_init:/docker-entrypoint-initdb.d
    networks:
      - observium_network
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 10
      labels:
        - "com.docker.stack.namespace=${STACK_NAME:-observium}"
        - "com.docker.swarm.service.name=observium_db"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "--silent"]
      interval: 60s
      timeout: 20s
      retries: 5
      start_period: 180s

  app:
    image: mbixtech/observium:24.12
    entrypoint: ["/bin/bash", "-c", "echo 'Waiting for database to be ready...' && until (echo > /dev/tcp/$$OBSERVIUM_DB_HOST/3306) >/dev/null 2>&1; do sleep 5; echo 'Waiting for database connection...'; done && echo 'Database is reachable!' && sleep 10 && echo 'Waiting for database initialization...' && sleep 20 && echo 'Starting Observium application' && /entrypoint.sh"]
    environment:
      OBSERVIUM_ADMIN_USER: ${OBSERVIUM_ADMIN_USER:-admin}
      OBSERVIUM_ADMIN_PASS: ${OBSERVIUM_ADMIN_PASS:-passw0rd}
      OBSERVIUM_DB_HOST: ${OBSERVIUM_DB_HOST:-db}
      OBSERVIUM_DB_NAME: ${OBSERVIUM_DB_NAME:-observium}
      OBSERVIUM_DB_USER: ${OBSERVIUM_DB_USER:-observium}
      OBSERVIUM_DB_PASS: ${OBSERVIUM_DB_PASS:-passw0rd}
      OBSERVIUM_BASE_URL: ${OBSERVIUM_BASE_URL:-http://observium.local:8888}
      TZ: ${TZ:-America/Chicago}
    volumes:
      - observium_logs:/opt/observium/logs
      - observium_rrd:/opt/observium/rrd
    networks:
      - observium_network
    ports:
      - "${OBSERVIUM_PORT:-8888}:80"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: any
        delay: 30s
        max_attempts: 10
      labels:
        - "com.docker.stack.namespace=${STACK_NAME:-observium}"
        - "com.docker.swarm.service.name=observium_app"
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 1m
      timeout: 20s
      retries: 5
      start_period: 120s

networks:
  observium_network:
    driver: overlay
    attachable: true
    labels:
      - "com.docker.stack.namespace=${STACK_NAME:-observium}"

volumes:
  observium_mysql_data:
    # Standard Portainer-compatible volume for MySQL data
    driver: local
    labels:
      - "com.docker.stack.namespace=${STACK_NAME:-observium}"
  observium_mysql_init:
    # Volume for MySQL initialization scripts
    driver: local
    labels:
      - "com.docker.stack.namespace=${STACK_NAME:-observium}"
  observium_logs:
    # Standard Portainer-compatible volume for Observium logs
    driver: local
    labels:
      - "com.docker.stack.namespace=${STACK_NAME:-observium}"
  observium_rrd:
    # Standard Portainer-compatible volume for Observium RRD files
    driver: local
    labels:
      - "com.docker.stack.namespace=${STACK_NAME:-observium}"